2ca02c
ff7f0e
1f77b4


Just note This is the dataset 




df = pd.read_csv("Datasets/Sports_Football_1872_2025.csv")

Data Excerpt 
Sports_Football_1872_2025.csv
Date,Home_team,Away_team,home_score,away_score,Match_type,venue_city,venue_country,neutral_venue
1872-11-30,Scotland,England,0,0,Friendly,Glasgow,Scotland,FALSE
1873-03-08,England,Scotland,4,2,Friendly,London,England,FALSE
1874-03-07,Scotland,England,2,1,Friendly,Glasgow,Scotland,FALSE
1875-03-06,England,Scotland,2,2,Friendly,London,England,FALSE




def get_avg_and_std(df, team_1="Finland", opposite_teams=["Sweden", "Norway", "Denmark"], interval=10, start_year=1970, end_year=2024)



get total goal score, average goal score by per match, std goal score and goal conceded same as well




	1	2	
	1	4	
	1	1	
	1	2	
    0	2	
    0	6	
    1	2	



![Description](https://i.imgur.com/cInISNA.png)
![Description](https://i.imgur.com/R7qypQd.png)

https://imgur.com/R7qypQd
https://imgur.com/UqAHg89




df = pd.read_csv("Datasets/Sports_Football_1872_2025.csv")

Data Excerpt 
Sports_Football_1872_2025.csv
Date,Home_team,Away_team,home_score,away_score,Match_type,venue_city,venue_country,neutral_venue
1872-11-30,Scotland,England,0,0,Friendly,Glasgow,Scotland,FALSE
1873-03-08,England,Scotland,4,2,Friendly,London,England,FALSE
1874-03-07,Scotland,England,2,1,Friendly,Glasgow,Scotland,FALSE
1875-03-06,England,Scotland,2,2,Friendly,London,England,FALSE



Instructions:
––––––––––––––––––––––––––
1. Take consideration following features while cluster 
Average goal difference
2. Overall standard deviation 
3. Win percentage



def cluster_team_by_performance(df, top_n=60, start_year=2000, end_year=2022,
                                 include_team=None, team_list=None, n_clusters=4):
    df['Date'] = pd.to_datetime(df['Date'])
    df['Year'] = df['Date'].dt.year
    df = df[df['Year'].between(start_year, end_year)]

    all_teams = pd.unique(df[['Home_team', 'Away_team']].values.ravel())
    stats = []

    for team in all_teams:
        team_matches = df[(df['Home_team'] == team) | (df['Away_team'] == team)]
        if team_matches.empty:
            continue

        goals_scored = 0
        goals_conceded = 0
        wins = 0
        matches = len(team_matches)

        for _, row in team_matches.iterrows():
            if row['Home_team'] == team:
                goals_scored += row['home_score']
                goals_conceded += row['away_score']
                if row['home_score'] > row['away_score']:
                    wins += 1
            else:
                goals_scored += row['away_score']
                goals_conceded += row['home_score']
                if row['away_score'] > row['home_score']:
                    wins += 1

        stats.append({
            'Team': team,
            'Avg Goals Scored': goals_scored / matches,
            'Avg Goals Conceded': goals_conceded / matches,
            'Win Rate': wins / matches,
            'Matches': matches
        })

    df_stats = pd.DataFrame(stats)

    # Filter logic: use team_list or top_n
    if team_list:
        selected_teams = set(team_list)
    else:
        selected_teams = set(df_stats.sort_values(by='Matches', ascending=False).head(top_n)['Team'])

    if include_team:
        selected_teams.update(include_team)

    df_stats = df_stats[df_stats['Team'].isin(selected_teams)].reset_index(drop=True)

    # Normalize for clustering
    features = df_stats[['Avg Goals Scored', 'Avg Goals Conceded', 'Win Rate']]
    scaler = MinMaxScaler()
    normalized = scaler.fit_transform(features)

    # K-Means clustering
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    df_stats['Cluster'] = kmeans.fit_predict(normalized)

    # Gradient-style display
    styled_df = df_stats[['Team', 'Avg Goals Scored', 'Avg Goals Conceded', 'Win Rate', 'Cluster']].sort_values(by='Cluster')
    display(styled_df.style.background_gradient(cmap='coolwarm', subset=['Avg Goals Scored', 'Avg Goals Conceded', 'Win Rate']))

    # 3D plot
    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')
    scatter = ax.scatter(
        df_stats['Avg Goals Scored'], df_stats['Avg Goals Conceded'], df_stats['Win Rate'],
        c=df_stats['Cluster'], cmap='tab10', s=60
    )

    for _, row in df_stats.iterrows():
        ax.text(row['Avg Goals Scored'], row['Avg Goals Conceded'], row['Win Rate'], row['Team'],
                size=8, zorder=1, color='black')

    ax.set_xlabel('Avg Goals Scored', labelpad=10)
    ax.set_ylabel('Avg Goals Conceded', labelpad=10)
    ax.set_zlabel('Win Rate', labelpad=10)
    ax.set_title('Team Clustering Based on Performance (K-Means)', fontsize=14)
    ax.view_init(elev=25, azim=135)
    plt.tight_layout()
    plt.show()




teams = [
    "Finland", "Norway", "Sweden", "Germany", "Hungary", "Estonia", "Turkey", 
    "Greece", "Italy", "France", "Netherlands", "Malta", "Poland", "Brazil", 
    "Austria", "Spain", "Portugal", "Morocco", "Argentina", "Israel", "Bangladesh"
]

cluster_team_by_performance(df, start_year=get_start_year, end_year=get_end_year, include_team=['Finland'], top_n = 30)
